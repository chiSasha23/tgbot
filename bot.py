from aiogram import Bot, Dispatcher, executor, types
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import sqlite3
import datetime
import os

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Environment Variables –Ω–∞ Render!")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# 7-–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å: —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ + –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
lessons = [
    {"video_url": ["https://youtu.be/oB-q416-de8"], "presentation": "presentationsday1.pdf"},
    {"video_url": ["https://youtu.be/baJWFQOZe68"], "presentation": "presentationsday2.pdf"},
    {"video_url": ["https://youtu.be/v6v8ZKzUckI", "https://www.arealme.com/relationship-attachment-style-test/uk/"], "presentation": "presentationsday3.pdf"},
    {"video_url": ["https://youtu.be/Lw-szL7QGSg"], "presentation": "presentationsday4.pdf"},
    {"video_url": ["https://youtu.be/fQB9bZqf5rs"], "presentation": "presentationsday5.pdf"},
    {"video_url": ["https://youtu.be/59cwx-L1Zvw"], "presentation": "presentationsday6.pdf"},
    {"video_url": ["https://youtu.be/tRll8S_IM9w"], "presentation": "presentationsday7.pdf"}
]

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
welcome_text = """–í—ñ—Ç–∞—é —Ç–µ–±–µ –Ω–∞ –∫—É—Ä—Å—ñ ¬´7 –∫—Ä–æ–∫—ñ–≤ –¥–æ —â–∞—Å–ª–∏–≤–∏—Ö —Å—Ç–æ—Å—É–Ω–∫—ñ–≤¬ª.
–¢—É—Ç —Ç–∏ –∑–Ω–∞–π–¥–µ—à 7 –º–æ–¥—É–ª—ñ–≤ —ñ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ–π –ø–æ –∫–æ–∂–Ω—ñ–π —ñ–∑ 7 –≤–∞–∂–ª–∏–≤–∏—Ö —Ç–µ–º, —è–∫—ñ –¥–æ–ø–æ–º–æ–∂—É—Ç—å —Ç–æ–±—ñ –∫—Ä–∞—â–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —Å–µ–±–µ —ñ –æ–±—Ä–∞—Ç–∏ –Ω–æ–≤–∏–π —à–ª—è—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ —â–∞—Å–ª–∏–≤–∏—Ö —Å—Ç–æ—Å—É–Ω–∫—ñ–≤ –Ω–∞ –º—ñ—Ü–Ω–æ–º—É —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—ñ.
‚†Ä
‚ú® –¶–µ–π –∫—É—Ä—Å –Ω–µ –ø—Ä–æ —Ç–µ, —è–∫ —Å—Ç–∞—Ç–∏ ¬´—ñ–¥–µ–∞–ª—å–Ω–æ—é¬ª –∞–±–æ ¬´–ø—Ä–∞–≤–∏–ª—å–Ω–æ—é¬ª. –¢—É—Ç –Ω–µ –±—É–¥–µ —á–∞—Ä—ñ–≤–Ω–∏—Ö –ø—ñ–≥—É–ª–æ–∫ —ñ –º–∏—Ç—Ç—î–≤–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.
–í—ñ–Ω –ø—Ä–æ —Ç–µ, —â–æ–± –±—É—Ç–∏ —Å–æ–±–æ—é. –ù–∞–≤—á–∏—Ç–∏—Å—å —Ä–æ–∑—É–º—ñ—Ç–∏ —Å–≤–æ—ó –ø–æ—Ç—Ä–µ–±–∏, –≥–æ–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ –Ω–∏—Ö, –≤—ñ–¥—Å—Ç–æ—é–≤–∞—Ç–∏ –∫–æ—Ä–¥–æ–Ω–∏ –±–µ–∑ —Å—Ç—Ä–∞—Ö—É –≤—Ç—Ä–∞—Ç–∏—Ç–∏ –ª—é–±–æ–≤.
‚†Ä
üß© –ö–æ–∂–µ–Ω –º–æ–¥—É–ª—å ‚Äî —Ü–µ —â–µ –æ–¥–∏–Ω –∫—Ä–æ–∫ –¥–æ –≥–ª–∏–±—à–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è:
 ‚Ä¢ —á–æ–º—É —Ç–æ–±—ñ –±—É–≤–∞—î –±–æ–ª—è—á–µ —É —Å—Ç–æ—Å—É–Ω–∫–∞—Ö
 ‚Ä¢ —â–æ —Ç–∏ –Ω–µ—Å–µ—à —ñ–∑ –¥–∏—Ç–∏–Ω—Å—Ç–≤–∞
 ‚Ä¢ —è–∫—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó –ø–æ–≤—Ç–æ—Ä—é—é—Ç—å—Å—è
 ‚Ä¢ —ñ —â–æ —Ç–∏ –º–æ–∂–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –≤–∂–µ –∑–∞—Ä–∞–∑
‚†Ä
üé• –£ –∫–æ–∂–Ω–æ–º—É –±–ª–æ—Ü—ñ ‚Äî –≤—ñ–¥–µ–æ, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è —ñ –ø—Ä–æ—Å—Ç—ñ, –∞–ª–µ –≥–ª–∏–±–æ–∫—ñ –≤–ø—Ä–∞–≤–∏.
–ù–µ –ø–æ—Å–ø—ñ—à–∞–π.
–¶–µ–π —à–ª—è—Ö ‚Äî –ø—Ä–æ —Ç–µ–±–µ.
‚†Ä
üíõ –ë–∞–∂–∞—é —Ç–æ–±—ñ —á–µ—Å–Ω–æ—ó, —Ç–µ–ø–ª–æ—ó —Ç–∞ —Å–ø—Ä–∞–≤–∂–Ω—å–æ—ó –ø–æ–¥–æ—Ä–æ–∂—ñ –¥–æ —Å–µ–±–µ ‚Äî –±–µ–∑ —Ç–∏—Å–∫—É, –±–µ–∑ –º–∞—Å–æ–∫. –£ —Ç–≤–æ—î–º—É —Ç–µ–º–ø—ñ"""

# –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("users.db")
cur = conn.cursor()
cur.execute("""CREATE TABLE IF NOT EXISTS users (
    chat_id INTEGER PRIMARY KEY,
    start_date TEXT,
    lesson_index INTEGER
)""")
conn.commit()

# /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    chat_id = message.chat.id
    cur.execute("SELECT * FROM users WHERE chat_id=?", (chat_id,))
    user = cur.fetchone()

    if not user:
        cur.execute("INSERT INTO users (chat_id, start_date, lesson_index) VALUES (?, ?, ?)",
                    (chat_id, datetime.date.today().isoformat(), 1))
        conn.commit()

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await bot.send_message(chat_id, welcome_text)
        # –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫: —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ + –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è
        for link in lessons[0]["video_url"]:
            await bot.send_message(chat_id, f"–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ: {link}")
        with open(lessons[0]['presentation'], "rb") as pres:
            await bot.send_document(chat_id, pres)
    else:
        await message.answer("–ö—É—Ä—Å –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π, —É—Ä–æ–∫–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏–º—É—Ç—å —â–æ–¥–Ω—è‚ù§Ô∏è")

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def send_lessons():
    today = datetime.date.today()
    cur.execute("SELECT chat_id, start_date, lesson_index FROM users")
    users = cur.fetchall()

    for chat_id, start_date, lesson_index in users:
        start_date = datetime.date.fromisoformat(start_date)
        days_passed = (today - start_date).days

        if lesson_index < len(lessons) and days_passed >= lesson_index:
            try:
                for link in lessons[lesson_index]["video_url"]:
                    await bot.send_message(chat_id, f"–ù–æ–≤–∏–π –¥–µ–Ω—å –Ω–∞—à–æ–≥–æ –∫—É—Ä—Å—Éüíï: {link}")
                with open(lessons[lesson_index]['presentation'], "rb") as pres:
                    await bot.send_document(chat_id, pres)

                cur.execute("UPDATE users SET lesson_index=? WHERE chat_id=?",
                            (lesson_index + 1, chat_id))
                conn.commit()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
async def on_startup(_):
    scheduler.add_job(send_lessons, "interval", hours=24)
    scheduler.start()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)


